function init (args) 
	local needs = {}
	needs["packet"] = tostring(true) -- needs to inspect entire packet (incl. headers)
	return needs
end


function match(args)
	local outer = args["packet"]
	
	-- if it's empty then move on
	if outer == nil then
		return 0
	end

	-- start with IP version + len
	local ip,e = string.find(outer, "\x45")
	-- 20 bytes header, so inner packet should start at ip+20
	local inner = string.sub(outer, ip+20)

	
	-- Inner should also be IPv4
	if inner:byte(1) ~= 0x45 then
		return 0
	end
	
	-- length is bytes 5+6 of UDP header
	local len_str = inner:sub(25,26)
	-- convert 2-byte field from string to int
	local listed_len = tonumber(len_str:byte(1)) * 2^8 + tonumber(len_str:byte(2))

	-- 20 byte IPv4 header + 8 byte UDP header (+1 for 1-indexing)
	local data = inner:sub(29)
	local real_len = data:len()

	if listed_len < real_len then
		return 1
	end
	
	return 0
end
